generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id
  registerAt       DateTime            @default(now()) @map("register_at")
  privacy          PrivacyLevel        @default(ALL_SAVES)
  requests         RequestLog[]
  conversations    ConversationLog[]
  themesDetections ThemeDetectionLog[]
  premium          Boolean             @default(false)
  dailyUsage       Int                 @default(0) @map("daily_usage")
  monthlyUsage     Int                 @default(0) @map("monthly_usage")
  lastUsage        DateTime            @default(now()) @map("last_usage")
  coins            Int                 @default(0)
  token            ApiToken[]
  prefModel        Model               @default(GPT35) @map("pref_model")
  language         String?
  PremiumUser      PremiumUser?

  @@map("users")
}

model PremiumUser {
  id                 String   @id
  startedOn          DateTime @default(now()) @map("started_on")
  languageIntonation String?
  user               User     @relation(fields: [id], references: [id])
  endAt              DateTime @map("end_at")

  @@map("premium_users")
}

model ThemeDetectionLog {
  id            String  @id
  message       String
  result        String
  userId        String  @map("user_id")
  user          User    @relation(fields: [userId], references: [id])
  usedTokens    Int     @map("used_tokens")
  success       Boolean
  error         String?
  promptName    String  @map("prompt_name")
  promptVersion String  @map("prompt_version")

  @@map("theme_detection_logs")
}

model RequestLog {
  id         String  @id
  message    String
  theme      String
  userId     String  @map("user_id")
  user       User    @relation(fields: [userId], references: [id])
  response   String
  appVersion String  @map("app_version")
  usedTokens Int     @map("used_tokens")
  success    Boolean
  error      String?

  @@map("request_logs")
}

model ConversationLog {
  id          String             @id
  message     String
  theme       String
  resultType  ConversationResult
  results     String
  action      Action?
  userId      String             @map("user_id")
  user        User               @relation(fields: [userId], references: [id])
  requestsIds String[]           @map("requests_ids")
  appVersion  String             @map("app_version")
  usedTokens  Int                @map("used_tokens")
  success     Boolean
  error       String?

  @@map("conversation_logs")
}

model ApiToken {
  key    String       @unique
  type   ApiTokenType
  userId String       @map("user_id")
  user   User         @relation(fields: [userId], references: [id])

  @@map("api_tokens")
}

model Guild {
  id           String              @id
  name         String
  owner        String
  premium      Boolean             @default(false)
  PremiumGuild PremiumGuild?
  customAssist CustomGuildAssist[]

  @@map("guilds")
}

model PremiumGuild {
  id    String     @id
  guild Guild      @relation(fields: [id], references: [id])
  bot   CustomBot?

  @@map("premium_guilds")
}

model CustomGuildAssist {
  id      String @id
  guildId String @map("guild_id")
  guild   Guild  @relation(fields: [guildId], references: [id])

  @@map("custom_guild_assists")
}

model CustomBot {
  id           String       @id
  premiumGuild PremiumGuild @relation(fields: [id], references: [id])
  token        String

  @@map("custom_bots")
}

model Prompt {
  name       String
  version    Int
  status     PromptStatus
  value      String
  createDate DateTime     @default(now()) @map("create_date")

  @@id([name, version])
  @@map("prompts")
}

enum ApiTokenType {
  FREE
  PREMIUM
}

enum ConversationResult {
  MESSAGE
  ACTION
  ERROR
}

enum Action {
  BAN
  UNBAN
  TEMPBAN
  MUTE
  UNMUTE
  KICK
  RENAME_USER
}

enum PrivacyStatus {
  ACCEPTED
  REFUSED
  WAITING
}

enum PrivacyLevel {
  ALL_SAVES
  ANONYMES
}

enum Model {
  GPT35
  GPT4
}

enum PromptStatus {
  ALPHA
  BETA
  PROD
  INVALID
}
